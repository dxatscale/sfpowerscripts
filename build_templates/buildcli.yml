parameters:

  - name: commitToGit
    type: boolean
    default: false

  - name: stageToDeploy
    type: string
    default: review

  - name: version
    type: string
    default: ''

  - name: environmentToDeploy
    type: string
    default: development

  - name: organization
    type: string
    default: ''


  - name: buildNumber
    type: string
    default: ''

  - name: toBuild
    type: boolean
    default: false

  - name: bump
    type: string
    default: 'patch'

  - name: publish
    type: boolean
    default: false



steps:
          - checkout: self

          - task: CmdLine@2
            displayName: "Update Build Number"
            condition: or ( eq( '${{ parameters.version }}', 'alpha'), eq( '${{ parameters.version }}', 'hotfix'))
            inputs:
              workingDirectory: '$(System.DefaultWorkingDirectory)/packages/sfpowerscripts-cli'
              script: |
               PKG_VERSION=$(jq -r ".version" package.json)
               echo "##vso[build.updatebuildnumber]${PKG_VERSION}"


          - task: NodeTool@0
            inputs:
             versionSpec: '14.x' 

          - task: CmdLine@2
            displayName: "Set Git Config"
            inputs:
               script: |
                 git config --global user.email "sfpowerkit.ci@dev.azure.com"
                 git config --global user.name "sfpowerkitci"


          - task: DownloadSecureFile@1
            displayName: 'Download secure file .npmrc'
            name: npmrc
            inputs:
                secureFile: '8abaf6dc-ff2e-427a-971b-a98cbd48af34' # Need to change this


          - task: CmdLine@2
            displayName: "Copy npmrc file to packages"
            inputs:
              script: |
               cp $(npmrc.secureFilePath)  $(System.DefaultWorkingDirectory)/.npmrc
               cp $(npmrc.secureFilePath)  $(System.DefaultWorkingDirectory)/packages/core/.npmrc
               cp $(npmrc.secureFilePath)  $(System.DefaultWorkingDirectory)/packages/sfpowerscripts-cli/.npmrc


          - task: npmAuthenticate@0
            displayName: 'npm Authenticate .npmrc'
            inputs:
                workingFile: .npmrc
                customEndpoint: npm

          - task: npmAuthenticate@0
            displayName: 'npm Authenticate packages/core/.npmrc'
            inputs:
                workingFile: packages/core/.npmrc
                customEndpoint: npm

          - task: npmAuthenticate@0
            displayName: 'npm Authenticate packages/sfpowerscripts-cli/.npmrc'
            inputs:
                workingFile: 'packages/sfpowerscripts-cli/.npmrc'
                customEndpoint: npm


          - script: 'npx lerna bootstrap'
            displayName: 'Bootstrap Lerna'
            condition: or( eq( ${{ parameters.publish }},true), eq( '${{ parameters.version }}', 'review') )


          - script: 'npx lerna run build'
            displayName: 'Build  All  Packages'
            condition: or( eq( ${{ parameters.publish }},true), eq( '${{ parameters.version }}', 'review') )

                 
          - task: CmdLine@2
            displayName: 'Run Core Unit Tests'
            condition: eq( ${{ parameters.publish }},true)
            inputs:
                 script: 'npm run test'
                 workingDirectory: '$(System.DefaultWorkingDirectory)/packages/core'

          - task: CmdLine@2
            displayName: 'Run CLI Unit Tests'
            condition: eq( ${{ parameters.publish }},true)
            inputs:
                 script: 'npm run test'
                 workingDirectory: '$(System.DefaultWorkingDirectory)/packages/sfpowerscripts-cli'

          - task: CmdLine@2
            displayName: 'Upload Coverage Results'
            condition: eq( ${{ parameters.publish }},true)
            inputs:
                 script: 'bash <(curl -s https://codecov.io/bash)'
                 workingDirectory: '$(System.DefaultWorkingDirectory)/packages/core'


          - task: CmdLine@2
            displayName: 'Publish CLI/Core'
            condition: eq( ${{ parameters.publish }},true)
            inputs:
                 script: 'npx lerna publish from-package --yes --dist-tag ${{ parameters.version }}'
                 workingDirectory: '$(System.DefaultWorkingDirectory)'

          - task: CmdLine@2
            displayName: 'Promote package'
            condition: or( eq( '${{ parameters.version }}', 'beta'), eq( '${{ parameters.version }}', 'latest') )
            inputs:
                 script: |
                    CORE_VERSION=$(jq -r ".version" packages/core/package.json)
                    CLI_VERSION=$(jq -r ".version" packages/sfpowerscripts-cli/package.json)
                    npm dist-tag add @dxatscale/sfpowerscripts.core@${CORE_VERSION} ${{ parameters.version }}
                    npm dist-tag add @dxatscale/sfpowerscripts@${CLI_VERSION} ${{ parameters.version }}
